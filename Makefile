.PHONY: help dev prod build up down restart logs clean prune seed admin health backup restore

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN  := \033[0;32m
YELLOW := \033[0;33m
RED    := \033[0;31m
NC     := \033[0m # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_DEV := docker-compose
COMPOSE_PROD := docker-compose -f docker-compose.prod.yml
FRONTEND_CONTAINER := hacktaika-frontend
DB_CONTAINER := hacktaika-db

help: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
	@echo "$(GREEN)HackTaika - –ö–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏$(NC)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

# Development –∫–æ–º–∞–Ω–¥—ã
dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ dev —Ä–µ–∂–∏–º–µ
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ...$(NC)"
	$(COMPOSE_DEV) up -d
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000$(NC)"

dev-build: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ dev —Ä–µ–∂–∏–º–µ
	@echo "$(GREEN)üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫...$(NC)"
	$(COMPOSE_DEV) up -d --build
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ!$(NC)"

# Production –∫–æ–º–∞–Ω–¥—ã
prod: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ production —Ä–µ–∂–∏–º–µ
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ...$(NC)"
	$(COMPOSE_PROD) up -d
	@echo "$(GREEN)‚úÖ Production –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"

prod-build: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ production
	@echo "$(GREEN)üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ production...$(NC)"
	$(COMPOSE_PROD) up -d --build
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ!$(NC)"

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
up: dev ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (alias –¥–ª—è dev)

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(YELLOW)‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	$(COMPOSE_DEV) down
	@echo "$(GREEN)‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...$(NC)"
	$(COMPOSE_DEV) restart
	@echo "$(GREEN)‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ$(NC)"

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
	@echo "$(YELLOW)‚è∏Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞...$(NC)"
	$(COMPOSE_DEV) stop
	@echo "$(GREEN)‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(GREEN)‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫...$(NC)"
	$(COMPOSE_DEV) start
	@echo "$(GREEN)‚úÖ –ó–∞–ø—É—â–µ–Ω–æ$(NC)"

# –õ–æ–≥–∏
logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	$(COMPOSE_DEV) logs -f

logs-frontend: ## –õ–æ–≥–∏ frontend
	$(COMPOSE_DEV) logs -f frontend

logs-db: ## –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	$(COMPOSE_DEV) logs -f postgres

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
db-push: ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É –ë–î (Prisma push)
	@echo "$(GREEN)üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î...$(NC)"
	docker exec -it $(FRONTEND_CONTAINER) npx prisma db push
	@echo "$(GREEN)‚úÖ –°—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞$(NC)"

db-migrate: ## –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
	@echo "$(GREEN)üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...$(NC)"
	docker exec -it $(FRONTEND_CONTAINER) npx prisma migrate dev
	@echo "$(GREEN)‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞$(NC)"

db-studio: ## –û—Ç–∫—Ä—ã—Ç—å Prisma Studio
	@echo "$(GREEN)üé® –ó–∞–ø—É—Å–∫ Prisma Studio...$(NC)"
	docker exec -it $(FRONTEND_CONTAINER) npx prisma studio

seed: ## –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	@echo "$(GREEN)üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ë–î...$(NC)"
	docker exec -it $(FRONTEND_CONTAINER) npm run seed
	@echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã$(NC)"

admin: ## –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	@echo "$(GREEN)üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...$(NC)"
	docker exec -it $(FRONTEND_CONTAINER) npm run create-admin
	@echo "$(GREEN)‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω$(NC)"

# –û—á–∏—Å—Ç–∫–∞
clean: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å volumes
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	$(COMPOSE_DEV) down
	@echo "$(GREEN)‚úÖ –û—á–∏—â–µ–Ω–æ$(NC)"

clean-all: ## –£–¥–∞–ª–∏—Ç—å –≤—Å–µ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, volumes, –æ–±—Ä–∞–∑—ã)
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo "$(RED)üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ...$(NC)"; \
		$(COMPOSE_DEV) down -v --rmi all; \
		echo "$(GREEN)‚úÖ –í—Å–µ —É–¥–∞–ª–µ–Ω–æ$(NC)"; \
	else \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi

prune: ## –û—á–∏—Å—Ç–∏—Ç—å Docker (–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Å–µ—Ç–∏)
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ Docker...$(NC)"
	docker system prune -af --volumes
	@echo "$(GREEN)‚úÖ Docker –æ—á–∏—â–µ–Ω$(NC)"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
ps: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(GREEN)üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	$(COMPOSE_DEV) ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@echo ""
	@echo "$(YELLOW)Database:$(NC)"
	@docker exec $(DB_CONTAINER) pg_isready -U hacktaika && echo "$(GREEN)‚úÖ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç$(NC)" || echo "$(RED)‚ùå –ë–î –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç$(NC)"
	@echo ""
	@echo "$(YELLOW)Frontend:$(NC)"
	@curl -sf http://localhost:3000 > /dev/null && echo "$(GREEN)‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç$(NC)" || echo "$(RED)‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç$(NC)"

stats: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "$(GREEN)üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:$(NC)"
	docker stats --no-stream

# –ë—ç–∫–∞–ø
backup: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î
	@echo "$(GREEN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...$(NC)"
	@mkdir -p ./backups
	@docker exec $(DB_CONTAINER) pg_dump -U hacktaika hacktaika_db > ./backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ ./backups/$(NC)"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
	@echo "$(YELLOW)‚ôªÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞...$(NC)"
	@LATEST=$$(ls -t ./backups/*.sql 2>/dev/null | head -n1); \
	if [ -z "$$LATEST" ]; then \
		echo "$(RED)‚ùå –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
		exit 1; \
	fi; \
	echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: $$LATEST"; \
	docker exec -i $(DB_CONTAINER) psql -U hacktaika hacktaika_db < $$LATEST
	@echo "$(GREEN)‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

# Shell –¥–æ—Å—Ç—É–ø
# –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
media-list: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
	@echo "$(GREEN)üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:$(NC)"
	@./scripts/upload-media.sh --list

media-upload: ## –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª (make media-upload TYPE=blog FILE=path/to/file.jpg)
	@if [ -z "$(TYPE)" ] || [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make media-upload TYPE=blog FILE=path/to/file.jpg$(NC)"; \
		echo "$(YELLOW)–¢–∏–ø—ã: blog, portfolio, works, team, clients$(NC)"; \
		exit 1; \
	fi
	@./scripts/upload-media.sh $(TYPE) $(FILE)

media-optimize: ## –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	@echo "$(GREEN)üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...$(NC)"
	@./scripts/upload-media.sh --optimize

media-help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º
	@./scripts/upload-media.sh --help

shell-frontend: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä frontend
	docker exec -it $(FRONTEND_CONTAINER) sh

shell-db: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ë–î
	docker exec -it $(DB_CONTAINER) sh

psql: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
	docker exec -it $(DB_CONTAINER) psql -U hacktaika -d hacktaika_db

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
install: ## –ü–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (build + db push + seed)
	@echo "$(GREEN)üéâ –ü–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ HackTaika...$(NC)"
	@echo "$(GREEN)1. –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	$(COMPOSE_DEV) build
	@echo "$(GREEN)2. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	$(COMPOSE_DEV) up -d
	@echo "$(GREEN)3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ë–î...$(NC)"
	@sleep 10
	@echo "$(GREEN)4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î...$(NC)"
	docker exec $(FRONTEND_CONTAINER) npx prisma db push
	@echo "$(GREEN)5. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...$(NC)"
	docker exec $(FRONTEND_CONTAINER) npm run seed
	@echo "$(GREEN)‚ú® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:3000$(NC)"

update: ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å
	@echo "$(GREEN)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...$(NC)"
	$(COMPOSE_DEV) down
	$(COMPOSE_DEV) build --no-cache
	$(COMPOSE_DEV) up -d
	@echo "$(GREEN)‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker exec $(FRONTEND_CONTAINER) npm test

lint: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	docker exec $(FRONTEND_CONTAINER) npm run lint

# –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
quick-restart: ## –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ frontend
	@echo "$(YELLOW)‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ frontend...$(NC)"
	docker restart $(FRONTEND_CONTAINER)
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ$(NC)"

rebuild-frontend: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ frontend
	@echo "$(GREEN)üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ frontend...$(NC)"
	$(COMPOSE_DEV) up -d --build --no-deps frontend
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ$(NC)"

# CI/CD
ci-build: ## Build –¥–ª—è CI/CD
	@echo "$(GREEN)üèóÔ∏è  CI Build...$(NC)"
	DOCKER_BUILDKIT=1 docker build --cache-from hacktaika-frontend:latest -t hacktaika-frontend:latest -f ./frontend/Dockerfile ./frontend
	@echo "$(GREEN)‚úÖ Build –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
	@echo "$(GREEN)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ HackTaika$(NC)"
	@echo ""
	@echo "$(YELLOW)–í–µ—Ä—Å–∏—è Docker:$(NC)"
	@docker --version
	@echo ""
	@echo "$(YELLOW)–í–µ—Ä—Å–∏—è Docker Compose:$(NC)"
	@docker-compose --version
	@echo ""
	@echo "$(YELLOW)–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:$(NC)"
	@$(COMPOSE_DEV) ps
	@echo ""
	@echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ:$(NC)"
	@docker system df
